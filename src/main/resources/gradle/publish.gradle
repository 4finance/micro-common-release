apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

tasks.bintrayUpload.dependsOn 'build'

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : System.properties['bintrayUser']
    key = project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : System.properties['bintrayKey']
    publications = ['mavenJava']
    dryRun = project.hasProperty('dryRun')
    pkg {
        repo = 'micro'
        userOrg = '4finance'
        name = project.name
        desc = project.description
        licenses = ['Apache-2.0']
        publish = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom.withXml {
                //#89 - workaround to not to have only runtime dependencies in generated pom.xml
                //Known limitation in maven-publish - - http://forums.gradle.org/gradle/topics/maven_publish_plugin_generated_pom_making_dependency_scope_runtime#reply_14120711
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
                //#70 - workaround for empty version in pom.xml when dependency-management-plugin is used
                //Known limitation of new Gradle publishing mechanism - https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8
                asNode().dependencies[0]?.get('dependency')?.each() { dep ->
                    String pomVer = dep.get("version").text();
                    String pomArtifactId = dep.get("artifactId").text();
                    String pomGroupId = dep.get("groupId").text();
                    if (pomVer.isEmpty()) {
                        def depVer = project.dependencyManagement.getManagedVersion("$pomGroupId", "$pomArtifactId")
                        dep.appendNode('version', depVer)
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}
artifacts {
    archives sourcesJar
    archives javadocJar
}
